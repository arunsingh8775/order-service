name: Build & Deploy (Oracle Linux VM)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  packages: read

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      USERNAME: ${{ secrets.GPR_USER }}   # only needed if you still pull from GitHub Packages
      TOKEN: ${{ secrets.GPR_KEY }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle

      - name: Build (skip tests)
        id: buildjar
        run: |
          set -e
          chmod +x gradlew
          ./gradlew -x test clean bootJar || ./gradlew -x test clean jar
          echo "jar_path=$(ls -t build/libs/*.jar | head -n1)" >> $GITHUB_OUTPUT
          ls -la build/libs

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: order-jar
          path: ${{ steps.buildjar.outputs.jar_path }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: order-jar
          path: dist

      - name: Show what we downloaded
        run: ls -la dist

      - name: Ensure target dir exists (on VM)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: opc
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            set -e
            sudo mkdir -p /opt/order-service
            sudo chown -R opc:opc /opt/order-service
            # Clean leftovers from earlier runs (dir named app.jar, stray dist folder, etc.)
            [ -d /opt/order-service/app.jar ] && sudo rm -rf /opt/order-service/app.jar || true
            [ -d /opt/order-service/dist ] && sudo rm -rf /opt/order-service/dist || true
            ls -la /opt/order-service

      - name: Copy JAR to Oracle Linux VM (drop leading "dist/")
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: opc
          key: ${{ secrets.VM_SSH_KEY }}
          source: dist/*.jar            # files inside dist on runner
          target: /opt/order-service/   # directory on VM
          overwrite: true
          strip_components: 1           # removes the "dist/" prefix so file lands directly in /opt/order-service

      - name: Configure systemd service & restart
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: opc
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            set -e

            # Find the latest jar in /opt/order-service and rename to app.jar
            if ls /opt/order-service/*.jar >/dev/null 2>&1; then
              latest="$(ls -t /opt/order-service/*.jar | head -n1)"
              echo "Latest JAR on VM: $latest"
              sudo mv -f "$latest" /opt/order-service/app.jar
            fi

            if [ ! -f /opt/order-service/app.jar ]; then
              echo "ERROR: app.jar not present after upload/rename"
              ls -la /opt/order-service || true
              exit 1
            fi

            sudo chown opc:opc /opt/order-service/app.jar

            # Create/refresh systemd unit
            sudo bash -c 'cat > /etc/systemd/system/order-service.service' << "EOU"
            [Unit]
            Description=Order Service (Spring Boot)
            After=network.target

            [Service]
            User=opc
            WorkingDirectory=/opt/order-service
            ExecStart=/usr/bin/java -jar /opt/order-service/app.jar
            Restart=on-failure
            RestartSec=5
            SuccessExitStatus=143
            Environment=JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF-8

            [Install]
            WantedBy=multi-user.target
            EOU

            sudo systemctl daemon-reload
            sudo systemctl enable order-service
            sudo systemctl restart order-service || (sudo journalctl -u order-service -n 200 --no-pager && false)

            # Open 8081 if firewalld is present
            if command -v firewall-cmd >/dev/null 2>&1; then
              sudo firewall-cmd --permanent --add-port=8081/tcp || true
              sudo firewall-cmd --reload || true
            fi

            echo "==== service status ===="
            sudo systemctl --no-pager -n 50 status order-service || true
            echo "==== recent logs ===="
            sudo journalctl -u order-service -n 100 --no-pager || true
