name: Build & Deploy Order Service

on:
  push:
    branches: ["main"]
  workflow_dispatch:

concurrency:
  group: order-service-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Ensure gradlew executable (fix CRLF if needed)
        run: |
          if command -v dos2unix >/dev/null 2>&1; then :; else sudo apt-get update && sudo apt-get install -y dos2unix; fi
          dos2unix gradlew || true
          chmod +x gradlew

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build JAR
        run: ./gradlew --no-daemon clean bootJar -x test

      - name: Verify build output
        run: |
          echo "Built artifacts:"
          ls -lah build/libs || true
          test -n "$(ls -1 build/libs/*.jar 2>/dev/null | head -n1)" || { echo "ERROR: No JAR found under build/libs"; exit 1; }

      - name: Copy files to VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: opc
          key: ${{ secrets.VM_SSH_KEY }}
          source: "build/libs/*.jar,docker-compose.yml,Dockerfile"
          target: "~/order-service"

      - name: Deploy on VM
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: opc
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            set -euo pipefail
            cd ~/order-service

            # rename jar consistently
            JAR="$(ls -1 build/libs/*.jar 2>/dev/null || ls -1 *.jar 2>/dev/null | head -n1)"
            [ -n "$JAR" ] || { echo "No JAR found"; exit 1; }
            cp -f "$JAR" app.jar

            # ensure network exists (Kafka & Postgres use it)
            sudo docker network inspect backend >/dev/null 2>&1 || sudo docker network create backend

            # build runtime image
            TAG="order-service:$(date +%s)"
            sudo docker build -t "$TAG" -f Dockerfile .

            # patch docker-compose.yml to use this image
            sed -i "s|image:.*order-service.*|image: $TAG|g" docker-compose.yml || true

            # redeploy
            sudo docker compose down || true
            sudo docker compose up -d

            echo "== Compose status =="
            sudo docker compose ps
            echo "== Logs (order-service) =="
            sudo docker logs --tail=80 order-service || true
